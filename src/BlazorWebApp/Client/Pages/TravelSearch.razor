@page "/travelsearch"

@attribute [StreamRendering(true)]

@using MudBlazor
@using Seedysoft.Libs.GoogleMapsRazorClassLib.GoogleMap

@{
    Variant variant = Variant.Outlined;
}

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">

    <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">

        <MudStepper CompleteButtonIcon="@Icons.Material.Filled.FindInPage"
                    OnPreviewInteraction="OnPreviewInteractionAsync"
                    ScrollableNavigation="false"
                    ShowResetButton
                    Vertical>

            <ActionContent Context="stepper">
                <MudButton ButtonType="@ButtonType.Button"
                           Color="@Color.Primary"
                           OnClick="@(() => { ClearDataAsync(); stepper.ResetAsync(true); })"
                           StartIcon="@Icons.Material.Filled.Search">Search again</MudButton>

                @if (!stepper.IsCompleted)
                {
                    <MudButton ButtonType="@ButtonType.Button"
                               Color="@Color.Primary"
                               Disabled="@(!stepper.PreviousStepEnabled)"
                               OnClick="@(() => stepper.PreviousStepAsync())"
                               StartIcon="@Icons.Material.Filled.NavigateBefore">Back</MudButton>
                    <MudSpacer />
                    @if (stepper.IsCurrentStepSkippable)
                    {
                        <MudButton ButtonType="@ButtonType.Button"
                                   Color="@Color.Primary"
                                   EndIcon="@stepper.SkipButtonIcon"
                                   OnClick="@(() => stepper.SkipCurrentStepAsync())">Skip</MudButton>
                    }
                    <MudSpacer />
                    <MudButton ButtonType="@ButtonType.Button"
                               Color="@Color.Primary"
                               EndIcon="@Icons.Material.Filled.NavigateNext"
                               OnClick="@(() => stepper.NextStepAsync())">Next</MudButton>
                }
            </ActionContent>

            <ChildContent>
                <MudStep HasError="@(!IsStep1Complete())"
                         Title="@(IsStep1Complete() ? $"{travelQueryModel.Origin} -> {travelQueryModel.Destination}" : string.Empty)">

                    <MudGrid>
                        <MudItem xs="12" md="6" xl="3">
                            <MudAutocomplete @bind-Value="@travelQueryModel.Origin"
                                             AutoFocus="@(!System.Diagnostics.Debugger.IsAttached)"
                                             Clearable
                                             DebounceInterval="450"
                                             Dense
                                             For="@(() => travelQueryModel.Origin)"
                                             FullWidth
                                             Label="Origin"
                                             MaxItems="20"
                                             MinCharacters="3"
                                             Placeholder="Select an origin place"
                                             Required
                                             ResetValueOnEmptyText
                                             SearchFunc="FindPlacesAsync"
                                             SelectOnActivation
                                             ShowProgressIndicator
                                             T="string"
                                             Variant="variant" />
                        </MudItem>
                        <MudItem xs="12" md="6" xl="3">
                            <MudAutocomplete @bind-Value="@travelQueryModel.Destination"
                                             Clearable
                                             DebounceInterval="450"
                                             Dense
                                             For="@(() => travelQueryModel.Destination)"
                                             FullWidth
                                             Label="Destination"
                                             MaxItems="20"
                                             MinCharacters="3"
                                             Placeholder="Select a destination place"
                                             Required
                                             ResetValueOnEmptyText
                                             SearchFunc="FindPlacesAsync"
                                             SelectOnActivation
                                             ShowProgressIndicator
                                             T="string"
                                             Variant="variant" />
                        </MudItem>
                    </MudGrid>

                </MudStep>

                <MudStep HasError="@(!IsStep2Complete())"
                         Title="@(IsStep2Complete() ? $"Products ({travelQueryModel.PetroleumProductsSelectedIds.Count}): {string.Join(", ", Libs.GasStationPrices.Models.Minetur.ProductoPetrolifero.All.Where(x => travelQueryModel.PetroleumProductsSelectedIds.Contains(x.IdProducto)).Select(x => x.Abreviatura).Order())}" : string.Empty)">

                    <MudButtonGroup Class="gap-4 pa-4" FullWidth Size="@Size.Medium" Variant="variant">

                        <MudButton ButtonType="@ButtonType.Button"
                                   IconColor="@(Libs.GasStationPrices.Models.Minetur.ProductoPetrolifero.All.Count == travelQueryModel.PetroleumProductsSelectedIds.Count ? Color.Primary : Color.Secondary)"
                                   EndIcon="@Icons.Material.Filled.SelectAll"
                                   IconSize="@Size.Large"
                                   OnClick="@(() => travelQueryModel.PetroleumProductsSelectedIds = Libs.GasStationPrices.Models.Minetur.ProductoPetrolifero.All.Select(static x => x.IdProducto).ToHashSet())">@nameof(Libs.GasStationPrices.Models.Minetur.ProductoPetrolifero.All)</MudButton>

                        <MudButton ButtonType="@ButtonType.Button"
                                   IconColor="@(Libs.GasStationPrices.Models.Minetur.ProductoPetrolifero.Gasoline.Select(x => x.IdProducto).All(y => travelQueryModel.PetroleumProductsSelectedIds.Contains(y)) ? Color.Primary : Color.Secondary)"
                                   EndIcon="@Icons.Material.Filled.PropaneTank"
                                   IconSize="@Size.Large"
                                   OnClick="@(() => travelQueryModel.PetroleumProductsSelectedIds = Libs.GasStationPrices.Models.Minetur.ProductoPetrolifero.Gasoline.Select(static x => x.IdProducto).ToHashSet())">@nameof(Libs.GasStationPrices.Models.Minetur.ProductoPetrolifero.Gasoline)</MudButton>

                        <MudButton ButtonType="@ButtonType.Button"
                                   IconColor="@(Libs.GasStationPrices.Models.Minetur.ProductoPetrolifero.Diesel.Select(x => x.IdProducto).All(y => travelQueryModel.PetroleumProductsSelectedIds.Contains(y)) ? Color.Primary : Color.Secondary)"
                                   EndIcon="@Icons.Material.Filled.CarRepair"
                                   IconSize="@Size.Large"
                                   OnClick="@(() => travelQueryModel.PetroleumProductsSelectedIds = Libs.GasStationPrices.Models.Minetur.ProductoPetrolifero.Diesel.Select(static x => x.IdProducto).ToHashSet())">@nameof(Libs.GasStationPrices.Models.Minetur.ProductoPetrolifero.Diesel)</MudButton>

                        <MudButton ButtonType="@ButtonType.Button"
                                   EndIcon="@Icons.Material.Filled.Deselect"
                                   IconSize="@Size.Large"
                                   OnClick="@(() => travelQueryModel.PetroleumProductsSelectedIds = [])">None</MudButton>

                    </MudButtonGroup>

                    <MudChipSet @bind-SelectedValues="@travelQueryModel.PetroleumProductsSelectedIds"
                                CheckMark="false"
                                Color="@Color.Info"
                                SelectionMode="@SelectionMode.MultiSelection"
                                T="long"
                                Variant="@Variant.Text">
                        @foreach (var item in Libs.GasStationPrices.Models.Minetur.ProductoPetrolifero.All)
                        {
                            <MudTooltip Text="@item.Nombre">
                                <MudChip Default="@(item.Abreviatura.StartsWith("G9") && !item.Abreviatura.EndsWith("E10"))"
                                         Text="@item.Abreviatura"
                                         Value="@item.IdProducto" />
                            </MudTooltip>
                        }
                    </MudChipSet>

                </MudStep>

                <MudStep CompletedChanged="OnCompletedChangedAsync"
                         Title="@($"Max distance: {travelQueryModel.MaxDistanceInKm} Km.")">

                    <MudSlider @bind-Value="@travelQueryModel.MaxDistanceInKm"
                               Immediate="false"
                               Max="50"
                               Min="1"
                               Size="@Size.Large"
                               Step="1"
                               T="int"
                               TickMarkLabels="@(Enumerable.Range(1, 50).Select(x => x == 1 || x % 5 == 0 ? $"{x}" : " ").ToArray())"
                               TickMarks />
                </MudStep>
            </ChildContent>

            <CompletedContent></CompletedContent>
        </MudStepper>

    </MudContainer>

    <MudSpacer />

    <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">

        <MudDataGrid @ref="RoutesDataGrid"
                     ColumnResizeMode="@ResizeMode.None"
                     Filterable="false"
                     Height="450"
                     Hover
                     Items="RoutesDataGridItems"
                     SortMode="@SortMode.None"
                     T="Libs.GoogleApis.Models.DirectionsServiceRoutes">
            <ColGroup>
                <col />
                <col style="width: 50px;" />
                <col style="width: 50px;" />
                <col />
                <col style="width: 50px;" />
            </ColGroup>
            <Columns>
                <PropertyColumn Property="@(x => x.Summary)" />
                <PropertyColumn CellStyle="text-align: right; text-wrap-mode: nowrap;" Property="@(x => x.Distance)" />
                <PropertyColumn CellStyle="text-align: right; text-wrap-mode: nowrap;" Property="@(x => x.Duration)" />

                <TemplateColumn Title="Warnings">
                    <CellTemplate>
                        @((MarkupString)$"{string.Join("<br />", context.Item.Warnings)}")
                    </CellTemplate>
                </TemplateColumn>

                <TemplateColumn StickyRight
                                Title="@string.Empty">
                    <CellTemplate>
                        <MudButton Color="@Color.Primary"
                                   EndIcon="@Icons.Material.Filled.Map"
                                   OnClick="@(async () => await ShowDirectionsServiceRouteInMapAsync(context.Item.Index))"
                                   Size="@Size.Small"
                                   Variant="Variant.Filled">Show</MudButton>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>

            <NoRecordsContent>No data</NoRecordsContent>

        </MudDataGrid>

        <Map @ref="TravelGoogleMap"
             Id="@nameof(TravelGoogleMap)"
             ApiKey="@googleApisSettings.ApiKey"
             Center="@(new Libs.GoogleApis.Models.Shared.LatLngLiteral(Seedysoft.Libs.Core.Constants.Earth.Home.Lat, Seedysoft.Libs.Core.Constants.Earth.Home.Lng))"
             Height="450" HeightUnit="Libs.Core.Enums.CssUnit.Px"
             Width="100" WidthUnit="Libs.Core.Enums.CssUnit.Percentage"
             Zoom="14"
             IsClickable
             OnMarkerClick="OnGoogleMapMarkerClick" />

        <MudSpacer />

        <MudDataGrid @ref="GasStationsDataGrid"
                     ColumnResizeMode="ResizeMode.None"
                     Filterable
                     FilterMode="DataGridFilterMode.ColumnFilterRow"
                     Height="450"
                     Hover
                     Items="GasStationsDataGridItems"
                     SortMode="SortMode.Single"
                     T="Libs.GasStationPrices.ViewModels.GasStationModel">
            <ColGroup>
                <col style="width: 50%;" />
                @foreach (var item in Libs.GasStationPrices.Models.Minetur.ProductoPetrolifero.All)
                {
                    var IsHidden = !travelQueryModel.PetroleumProductsSelectedIds.Contains(item.IdProducto);

                    <col hidden="@IsHidden" />
                }
                <col style="width: 50px;" />
            </ColGroup>
            <Columns>
                <PropertyColumn Property="@(x => x.RotuloTrimed)" Filterable="true" Sortable="true" Title="Rótulo">
                    <FilterTemplate>
                        <MudIconButton OnClick="@(() => IsRotuloFilterOpen = true)" Icon="RotuloFilterIcon" Size="Size.Small" />
                        <MudOverlay Visible="IsRotuloFilterOpen" OnClick="@(() => IsRotuloFilterOpen = false)" />
                        <MudPopover Open="IsRotuloFilterOpen" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
                            <MudStack Spacing="0">
                                <MudCheckBox T="bool" Label="Select All" Size="Size.Small" Value="IsRotuloFilterAllSelected" ValueChanged="RotuloFilterSelectAll" />
                                <MudStack Spacing="0" Style="overflow-y: auto; max-height: 250px">
                                    @foreach (var item in context.Items.Select(x => x.RotuloTrimed).Distinct().Order())
                                    {
                                        <MudCheckBox Label="@($"{item}")"
                                                     Size="Size.Small"
                                                     T="bool"
                                                     Value="@RotuloFilterSelectedItems.Contains(item)"
                                                     ValueChanged="@((value) => RotuloFilterSelectedChanged(value, item))" />
                                    }
                                </MudStack>
                                <MudStack Row Class="justify-md-space-evenly">
                                    <MudButton OnClick="@(() => RotuloFilterClearAsync(context))">Clear</MudButton>
                                    <MudButton Color="Color.Primary" OnClick="@(() => RotuloFilterApplyAsync(context))">Filter</MudButton>
                                </MudStack>
                            </MudStack>
                        </MudPopover>
                    </FilterTemplate>
                </PropertyColumn>

                @foreach (var item in Libs.GasStationPrices.Models.Minetur.ProductoPetrolifero.All)
                {
                    var IsHidden = !travelQueryModel.PetroleumProductsSelectedIds.Contains(item.IdProducto);
                    <TemplateColumn CellClass="mud-table-cell-align-right"
                                    Filterable="false"
                                    Hidden="IsHidden"
                                    SortBy="@(x => x.Prices.FirstOrDefault(y => y.Product.IdProducto == item.IdProducto)?.Price ?? null)"
                                    Sortable="true"
                                    Title="@item.Abreviatura">
                        <CellTemplate>
                            @(context.Item.Prices.FirstOrDefault(y => y.Product.IdProducto == item.IdProducto)?.Price ?? null)
                        </CellTemplate>
                    </TemplateColumn>
                }

                <TemplateColumn Filterable="false"
                                Sortable="false"
                                StickyRight
                                Title="@string.Empty">
                    <CellTemplate>
                        <MudButton Color="Color.Primary"
                                   EndIcon="@Icons.Material.Filled.Map"
                                   OnClick="@(async () => await ShowGasStationInMapAsync(context.Item))"
                                   Size="Size.Small"
                                   Variant="Variant.Filled">Show</MudButton>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>

            <NoRecordsContent>No data</NoRecordsContent>

        </MudDataGrid>

    </MudContainer>

</MudContainer>
