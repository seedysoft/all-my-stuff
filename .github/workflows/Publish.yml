# -v  | --verbosity <LEVEL> # Allowed values are q[uiet], m[inimal], n[ormal], d[etailed], and diag[nostic]. The default is minimal.

name: Publish

concurrency:
  cancel-in-progress: true
  group: '**'

defaults:
  run:
    shell: bash

on:
  push:
    branches:
      - feat/use-artifacts-version
  workflow_dispatch:

permissions:
  contents: write
  
jobs:
  publish_and_pack:
    name: Publish and pack
    runs-on: ${{ matrix.runtime.os }}
    strategy:
      fail-fast: true
      matrix:
        runtime:
          - {name: linux-arm64, os: ubuntu-latest}
          - {name: linux-x64,   os: ubuntu-latest}
          - {name: win-x64,     os: windows-latest}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@main
      - name: Setup dotnet
        uses: actions/setup-dotnet@main
        with:
          dotnet-version: 8
      - name: Make publish folder "./${{ matrix.runtime.name }}/"
        run: mkdir -p "./${{ matrix.runtime.name }}/"
      # - name: Build Outbox
      #   run: |
      #     dotnet build "./src/Outbox/ConsoleApp/Seedysoft.Outbox.ConsoleApp.csproj" -c Release --nologo -v m
      #     dotnet publish "./src/Outbox/ConsoleApp/Seedysoft.Outbox.ConsoleApp.csproj" -o "./${{ matrix.runtime.name }}/" -r "${{ matrix.runtime.name }}" -c Release --no-restore --nologo -p:PublishTrimmed=false --sc -v m
      # - name: Build Pvpc
      #   run: |
      #     dotnet build "./src/Pvpc/ConsoleApp/Seedysoft.Pvpc.ConsoleApp.csproj" -c Release --nologo -v m
      #     dotnet publish "./src/Pvpc/ConsoleApp/Seedysoft.Pvpc.ConsoleApp.csproj" -o "./${{ matrix.runtime.name }}/" -r "${{ matrix.runtime.name }}" -c Release --no-restore --nologo -p:PublishTrimmed=false --sc -v m
      # - name: Build WebComparer
      #   run: |
      #     dotnet build "./src/WebComparer/ConsoleApp/Seedysoft.WebComparer.ConsoleApp.csproj" -c Release --nologo -v m
      #     dotnet publish "./src/WebComparer/ConsoleApp/Seedysoft.WebComparer.ConsoleApp.csproj" -o "./${{ matrix.runtime.name }}/" -r "${{ matrix.runtime.name }}" -c Release --no-restore --nologo -p:PublishTrimmed=false --sc -v m
      - name: Build BlazorWebApp
        run: |
          dotnet build "./src/BlazorWebApp/Server/Seedysoft.BlazorWebApp.Server.csproj" -c Release --nologo -v m
          dotnet publish "./src/BlazorWebApp/Server/Seedysoft.BlazorWebApp.Server.csproj" -o "./${{ matrix.runtime.name }}/" -r "${{ matrix.runtime.name }}" -c Release --no-restore --nologo -p:PublishTrimmed=false --sc -v m
      - name: Get Version from Project File
        id: get-version
        run: echo "version=$(grep -m 1 '"Seedysoft.Libs.BackgroundServices/' ./${{ matrix.runtime.name }}/Seedysoft.BlazorWebApp.Server.deps.json | grep -Eo '[[:digit:]]{2}\.[[:digit:]]{1,4}\.[[:digit:]]{1,4}')" >> $GITHUB_OUTPUT
      - name: Show the next version
        run: |
          echo ${{ steps.get-version.outputs.version }}
      - name: Pack to ${{ matrix.runtime.name }}.${{ github.ref_name }}.7z
        id: pack
        run: |
          cd ${{ matrix.runtime.name }}/
          7z a -r -t7z "../${{ matrix.runtime.name }}.${{ github.ref_name }}.7z" *
          cd ..
#     - name: Upload artifact ${{ matrix.runtime.name }}.${{ github.ref_name }}.7z
#       if: steps.pack.outcome == 'success'
#       uses: actions/upload-artifact@main
#       with:
#         name: ${{ matrix.runtime.name }}.${{ github.ref_name }}.7z
#         path: ${{ matrix.runtime.name }}.${{ github.ref_name }}.7z
#         compression-level: 0
#         if-no-files-found: error # `warn` or `ignore` are also available, defaults to `warn`
      - name: Cache artifact ${{ matrix.runtime.name }}.${{ github.ref_name }}.7z
        if: steps.pack.outcome == 'success'
        id: cache-artifact
        uses: actions/cache/save@v3
        with:
          path: ${{ matrix.runtime.name }}.${{ github.ref_name }}.7z
          key: ${{ matrix.runtime.name }}.${{ github.ref_name }}
    
  release:
    name: Create a release
    needs: publish_and_pack
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@main
      - name: Make download folder
        run: mkdir -p ./artifacts/
  #     - name: Download published app as artifact
  #       uses: actions/download-artifact@main
  #       with:
  #         path: ./artifacts
      - name: Restore cache files
        uses: actions/cache/restore@v3
        with:
          path: ./artifacts
          key: ${{ publish_and_pack.steps.cache-artifact.cache-primary-key }}
          fail-on-cache-miss: true
      - name: Make Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          name: Release ${{ github.ref_name }}
          fail_on_unmatched_files: true
          generate_release_notes: true
          files: ./artifacts/*/*.7z
